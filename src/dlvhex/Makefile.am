AUTOMAKE_OPTIONS = gnu

# `make maintainer-clean' removes those files too
MAINTAINERCLEANFILES = \
    DLVresultParser.hpp \
    DLVresultParser.output \
    HexParser.hpp \
    HexParser.output \
    location.hh \
    position.hh \
    stack.hh

# automake is not aware of those autogenerated files
EXTRA_DIST = \
    DLVresultParser.hpp \
    HexParser.hpp \
    location.hh \
    position.hh \
    stack.hh

# before we package ourselves, we add FlexLexer.h to the distribution directory
dist-hook:
	$(LN_S) @FLEXLEXER_H@ $(top_distdir)/src/dlvhex


# global preprocessor flags
INCLUDES = \
    -I$(top_srcdir)/include \
    -I$(top_builddir)/src \
    -I$(top_srcdir)/src \
    $(BOOST_CXXFLAGS)


# install dlvhex into $prefix/bin
bin_PROGRAMS = dlvhex

# install those libraries into $pkglibdir/lib
pkglib_LTLIBRARIES = libdlvhexbase.la libaspsolver.la

# the dlvhex binary
dlvhex_SOURCES = \
    HexParser.ypp \
    HexScanner.lpp \
    AnswerSet.cpp \
    dlvhex.cpp \
    RuleMLOutputBuilder.cpp \
    ResultContainer.cpp \
    SafetyChecker.cpp \
    TextOutputBuilder.cpp \
    HexParserDriver.cpp \
    URLBuf.cpp


# we want libltdl includes
INCLUDES += @INCLTDL@ @LIBCURL_CPPFLAGS@

#
# -static: statically link libdlvhexbase
# -export-dynamic: export all dynamic symbols, otherwise the plugins would use incompatible exceptions
#
dlvhex_LDFLAGS = -static -export-dynamic

#
# dlvhex itself also uses the convenience libs (see below)
#
dlvhex_LDADD = @LIBLTDL@ @LIBADD_DL@ @LIBCURL@ libdlvhexbase.la libaspsolver.la

# dlvhex API
libdlvhexbase_la_SOURCES = \
    Atom.cpp \
    AggregateAtom.cpp \
    AtomFactory.cpp \
    AtomNode.cpp \
    AtomSet.cpp \
    BoostComponentFinder.cpp \
    Component.cpp \
    ComponentFinder.cpp \
    DependencyGraph.cpp \
    EvaluateExtatom.cpp \
    ExternalAtom.cpp \
    Error.cpp \
    FixpointModelGenerator.cpp \
    globals.cpp \
    GraphBuilder.cpp \
    GraphProcessor.cpp \
    GuessCheckModelGenerator.cpp \
    Literal.cpp \
    OrdinaryModelGenerator.cpp \
    PluginContainer.cpp \
    PluginInterface.cpp \
    PrintVisitor.cpp \
    Program.cpp \
    ProgramBuilder.cpp \
    Repository.cpp \
    Registry.cpp \
    Rule.cpp \
    Term.cpp

# dlvhex ASP component
libaspsolver_la_SOURCES = \
    DLVresultParser.ypp \
    DLVresultScanner.lpp \
    DLVresultParserDriver.cpp \
    ParserDriver.cpp \
    ASPsolver.cpp \
    ProcessBuf.cpp


# for more information on `-version-info' see
# <http://www.gnu.org/software/libtool/manual.html#Versioning>, and
# the USENIX paper `Library Interface Versioning in Solaris and Linux'
# <http://www.usenix.org/publications/library/proceedings/als00/2000papers/papers/full_papers/browndavid/browndavid.pdf>
libdlvhexbase_la_LDFLAGS = -version-info 5:1:0
libaspsolver_la_LDFLAGS = -version-info 0:0:0

libdlvhexbase_la_LIBADD = @LIBLTDL@ @LIBADD_DL@

#
# in maintainer-mode we check for a sufficient version of the bison/flex combo
#

# minimum bison version
BISON_MAJOR=2
BISON_MINOR=2

# minimum flex version
FLEX_MAJOR=2
FLEX_MINOR=5
FLEX_MICRO=33

#
# don't let automake rename and move the output files of flex/bison,
# this doesn't work for pure C++ parser (yet)
#
.lpp.cpp:
	@flex_version=`$(LEX) --version 2>&1 | sed -ne 's/^.*flex[^0-9]*//p'` ; \
	declare -i flex_major ; \
	declare -i flex_minor ; \
	declare -i flex_micro ; \
	flex_major=`echo $$flex_version | sed "s/^\([0-9]*\).\([0-9]*\).\([0-9]*\)/\1/"` ; \
	flex_minor=`echo $$flex_version | sed "s/^\([0-9]*\).\([0-9]*\).\([0-9]*\)/\2/"` ; \
	flex_micro=`echo $$flex_version | sed "s/^\([0-9]*\).\([0-9]*\).\([0-9]*\)/\3/"` ; \
	if test $$flex_major -lt $(FLEX_MAJOR) || test $$flex_minor -lt $(FLEX_MINOR) || test $$flex_micro -lt $(FLEX_MICRO); then \
		echo Wrong version of flex installed: $$flex_version, I need at least $(FLEX_MAJOR).$(FLEX_MINOR).$(FLEX_MICRO) ; \
		exit 1 ;\
	fi
	$(LEXCOMPILE) -o $@ $<

.ypp.cpp:
	@bison_version=`$(YACC) --version 2>&1 | sed -ne 's/^.*GNU Bison[^0-9]*//p'` ; \
	declare -i bison_major ; \
	declare -i bison_minor ; \
	bison_major=`echo $$bison_version | sed "s/^\([0-9]*\).\([0-9]*\)/\1/"` ; \
	bison_minor=`echo $$bison_version | sed "s/^\([0-9]*\).\([0-9]*\)/\2/"` ; \
	if test $$bison_major -lt $(BISON_MAJOR) || test $$bison_minor -lt $(BISON_MINOR); then \
		echo Wrong version of bison installed: $$bison_version, I need at least $(BISON_MAJOR).$(BISON_MINOR) ; \
		exit 1 ;\
	fi
	$(YACCCOMPILE) -o $@ $<


#
# bison flags
#
#AM_YFLAGS = -d
