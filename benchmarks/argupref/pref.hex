node(1).
node(2).
node(3).
edge(1, 2).
edge(2, 3).

% guess all answer set candidates
in(X) v out(X) :- node(X).

% S must be admissible
% (i) conflict-free
:- in(X), in(Y), edge(X, Y).
% (ii) each a \in S is defended by S
isAttackedBy(X, Y) :- in(X), edge(Y, X).
isDefended(X) :- isAttackedBy(X, Y), in(Z), edge(Z, Y).
:- isAttackedBy(X, Y), not isDefended(X).

% every admissible set must satisfy that S \not\subsetneq T
inT(X) v outT(X) :- node(X).
input(node, X, X) :- node(X).
input(edge, X, Y) :- edge(X, Y).
input(s, X, X) :- in(X).
input(t, X, X) :- inT(X).
sat :- &testCautiousQuery["check.hex", input, ok]().
inT(X) :- sat, node(X).
outT(X) :- sat, node(X).
:- not sat.
