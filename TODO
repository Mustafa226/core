-*- org -*-

* TODO dlvhex cannot deal with LD_LIBRARY_PATH/DYNLD_LIBRARY_PATH

* TODO Fix extatom3.hex and dawg.hex testcases

* TODO Fix Term's namespace handling
We need to add qname support to the Terms, i.e., store prefix and
localname separately.

Also check boost spirit's symbol table implementation:
<http://spirit.sourceforge.net/distrib/spirit_1_8_5/libs/spirit/doc/symbols.html>

* TODO Move strong negation handling to Term
Whenever we create a symbol with '-' as first character, or a ctor is
called with the proper parameter, we set a negation flag in Term.

* TODO Move auxiliary predicates to Term
Whenever we create an auxiliary symbol, we tag it in the symbol table
with the "aux tag."

In general, Terms are immutable wrappers for the symbol table, hence,
creating symbols can only be achieved via Term's ctors (and no setter
methods).

* TODO Global URI API
Most plugins need URI handling (as well as dlvhex).

* TODO Remove replacement/aux name handling from ExternalAtom
Replacement name == function name, and auxiliary name is generated on
the fly in GraphBuilder. But we need some context for EvaluateExtatom,
since it needs to AtomSet::matchPredicate() the auxname for the
function call. (Or we can matchPredicate in ExternalComponent?)

* TODO RuleBuilder for all the internal rewriting processes
Make the rewritings explicit through a dedicated rewriting
hierarchy. We need to rewrite in
- the model generators (HO vs. GnC, maybe encode Terms so we do not
  need to send tons of strings...)
- graph builder (though a bit differently: external dependencies)

* TODO Send unknown command line options to dlv?
Handy for passing, e.g., optimization flags to dlv.

* TODO Add a dlvhex facade to couple all intermediate products

* TODO Generalise ASPsolver
We need something like ASPSolver<Builder,Parser> (similar to the
QueryDirector in the dlplugin), so we do not need to copy so many
strings around.

* TODO Get rid of ProgramBuilder
The PrintVisitors are good enough. At least we have to check whether
the ProgramBuilders can do a better job.

* TODO HEX-parser should create metainformation of the program
Like no. of external and HO atoms, aggregates, ...; given this
information, we can effectively choose what parts of dlvhex have to be
instantiated or can be bypassed, i.e., pure dlv programs do not need
the depgraph stuff.

* TODO New command line option for "single plugin dir"
For instance, we could use -PDIR, which sets the plugin load directory
only to DIR, instead of
OPTDIR:~/.dlvhex/plugins:$prefix/lib/dlvhex/plugins. This is good for
testsuites, since usually, developers did already install a global
version of their plugin, and this conflicts with the current build
version of the plugin.

* TODO Complete the dlvhex API (output, intput, ...)
Plugins should behave as passively as possible, i.e., no registration
of data like namespaces or similar information *initiated* from the
plugins.

* TODO Semantics API
Design proper interfaces for different semantics, e.g., HEX, WFS,
etc. Should we allow plugins to add new semantic computations?

* TODO Let plugins maintain global state in the program itself?
Like
  #document(foobar.xml)
  a(X) :- &xpath['//person'](X).
or
  #ontology(hugo.owl)
  a(X) :- DL[Q](X).

* TODO Use boost spirit instead of flex/bison
<http://spirit.sourceforge.net/distrib/spirit_1_8_5/libs/spirit/doc/techniques.html>

* TODO Use parse tree representation in Optimizer
This goes probably hand in hand with the switch to boost spirit; see
also
<http://spirit.sourceforge.net/distrib/spirit_1_8_5/libs/spirit/doc/trees.html>. This
AST must be a very well-tailored data structure, and easily
traverseable/updateable/...

Maybe something like this:

.--r--.--h- a(X)
|     +--h- b(X)
|     +--b- c(X)
|
+--r--.--h- a(b).

which is

a(X) v b(X) :- c(X).
a(b).


This should be most likely be in Program, or we can convert it to
Programs, or even be Program (in that case, Program must be more
flexible). Either way, whenever one updates the AST, the corresponding
Program must be updated as well.

* TODO Query support
And what kind of queries can we push to dlv? (Query answer parser must
be created!)

* TODO Magic Set rewriting

* TODO Add support for RIF BLD presentation syntax

* TODO [Mac OS X] Install user plugins in ~/Library/Application Support/dlvhex/plugins
<http://developer.apple.com/documentation/MacOSX/Conceptual/BPFileSystem/Articles/LibraryDirectory.html>

* TODO [Mac OS X] Add pkg/dmg package support?
<http://developer.apple.com/documentation/CoreFoundation/Conceptual/CFBundles/CFBundles.html>
<http://developer.apple.com/documentation/Porting/Conceptual/PortingUnix/distributing/chapter_9_section_1.html>

* TODO [Linux] Add deb/rpm package support?

* TODO [Windows] Add dll loading support
We may build dlvhex with cygwin; unfortunately, the plugin loading
part is nonfunctional. configure --enable-shared is not working, and
we need to tweak the symbol exporting pragmas.

* TODO How to deal with plugin dependencies?
What's more, how to deal with plugins that are unable to "cooperate,"
e.g., the sparql-plugin is not able to process combined sparql
statements and rules. We could use a major-mode/minor-mode concept
just as in Emacs?

See also
<http://sourceforge.net/mailarchive/message.php?msg_name=c48f89e40802030429h1a8eff67y86403da4b51ee122%40mail.gmail.com>

* TODO Is our rewriting architecture with streams adequate? Can we do better?

* TODO We need to parse things like "10"^^xsd:integer or "foo is not \"bar\""
Symboltable should do back-and-forth translation of dlvhex symbols to
generix dlv symbols. See
<http://spirit.sourceforge.net/distrib/spirit_1_8_5/libs/spirit/doc/symbols.html>.


* TODO dlvhex server mode
inetd (Linux) and launchd (Mac OS X) should be enough:

Add the next line to /etc/services in order to enable the dlvhex
service (we chose port 51966 because it is 0xCAFE in HEX):

dlvhex 51966/tcp

Add this line to /etc/inetd.conf:

dlvhex stream tcp6 nowait  root /usr/local/bin/dlvhex dlvhex --silent --inetd --

(you can use update-inetd on debian/ubuntu)


Launchd setup: <http://developer.apple.com/macosx/launchd.html>


Or maybe as CGI application: (argv[0] == "dlvhex.cgi") => CGI mode.

Or even as an apache module?

* TODO Add support for "internal" plugins
To simplify all the different _internal_ output builder (and maybe
parsers/rewriter/optimizers), PluginContainer should support non-DLL
"plugins." So the main code does not have to care about all the
different input/output modes and just redirect the enquiries to the
plugin system.

* TODO Describe the testsuite in RDF
See <http://www.w3.org/2001/sw/DataAccess/tests/r2.html>.
