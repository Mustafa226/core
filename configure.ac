AC_PREREQ([2.61])
AC_INIT([dlvhex],[1.7.2],[dlvhex-devel@lists.sourceforge.net])
AM_INIT_AUTOMAKE([-Wall gnu check-news color-tests 1.11])

AC_CONFIG_SRCDIR([src/dlvhex/dlvhex.cpp])
AC_CONFIG_HEADER([include/config.h])


AC_CANONICAL_HOST

#
# check host system
# this will be used in include/common.h.in
#
case $host in
    *-*-msdos* | *-*-go32* | *-*-mingw32* | *-*-cygwin* | *-*-windows*)
        HAVE_WIN32=1
        ;;
    *)
        ;;
esac
AC_SUBST([HAVE_WIN32])

# Check for C/C++ compiler
AC_PROG_CC
AC_PROG_CXX
AC_PROG_CXXCPP

# check compiler

# set default warning parameters for g++ compatible compilers
# allow to disable certain warnings using custom CXXFLAGS
if test "$GXX" = "yes"; then
   CXXFLAGS="-W -Wall $CXXFLAGS"
fi

# check for clang
case $CXX in
   clang*)
     CXXFLAGS="$CXXFLAGS -ferror-limit=5"
   ;;
   *)
   ;;
esac


# Checks for header files.
AC_HEADER_DIRENT
AC_CHECK_HEADERS([sys/param.h])

# by default we look into /opt/local and /sw for include files (macports vs. fink)
case $host_os in
     darwin*|macosx*)
	CPPFLAGS="$CPPFLAGS -I/opt/local/include -I/sw/include"
     ;;
esac 

# Checks for libtool's libltdl
AC_LIB_LTDL
AC_LIBLTDL_CONVENIENCE
AC_LIBTOOL_DLOPEN
AC_PROG_LIBTOOL
AC_SUBST(INCLTDL)
AC_SUBST(LIBLTDL)

# configure autogenerated libltdl directory
# AC_CONFIG_SUBDIRS([libltdl])
# fix for some versions of autoconf/libtool, see also https://gnunet.org/mantis/view.php?id=1340
m4_ifdef([_AC_SEEN_TAG(libltdl)], [], [AC_CONFIG_SUBDIRS([libltdl])])

# pkg-config support
PKG_PROG_PKG_CONFIG

# checking for boost libs
BOOST_REQUIRE([1.41.0])
BOOST_SMART_PTR
BOOST_STRING_ALGO
BOOST_TOKENIZER
BOOST_IOSTREAMS
BOOST_GRAPH
BOOST_PROGRAM_OPTIONS
BOOST_TEST
BOOST_SYSTEM
BOOST_FILESYSTEM

#
# the default system-wide plugin dir ${pkglibdir}/plugins can be
# overridden by setting SYS_PLUGIN_DIR=... at configure-time
#
if test "$SYS_PLUGIN_DIR" = ""; then
    sysplugindir="\${pkglibdir}/plugins"
else
    sysplugindir="$SYS_PLUGIN_DIR"
fi

# this goes into dlvhex.pc
AC_SUBST(sysplugindir)

# ${pkglibdir} can only be evaluated in the Makefiles, so no way to
# put it in config.h
CPPFLAGS="$CPPFLAGS -DSYS_PLUGIN_DIR='\"$sysplugindir\"'"


#
# the user plugin dir consists of the user home concatenated with
# and USER_PLUGIN_DIR, which is .dlvhex/plugins by default and can be
# overridden by setting USER_PLUGIN_DIR=... at configure-time
#
if test "$USER_PLUGIN_DIR" = ""; then
    userplugindir=".dlvhex/plugins"
else
    userplugindir="$USER_PLUGIN_DIR"
fi

# this goes into dlvhex.pc
AC_SUBST(userplugindir)

# this can only be evaluated in the Makefiles
CPPFLAGS="$CPPFLAGS -DUSER_PLUGIN_DIR='\"$userplugindir\"'"


#
# third-party solver integration
# * dlv as executable
# * dlv as shared library (libdlv)
# * clingo as shared library (preliminary)
#

EXTSOLVER_LIBS=
EXTSOLVER_LDFLAGS=
EXTSOLVER_CPPFLAGS=

extsolver_found=false

#
# the user didn't supply a path for dlv
#
if test "$DLV" = ""; then
    # we assume "dlv"
    DLV=dlv
    # and check if it exists
    AC_CHECK_PROG(DLVPATH, $DLV, $DLV, notfound)
else
    # the user supplied a 'DLV=...'
    # check if it exists (with search path=/, since the user supplied
    # an entire path!) and set DLVPATH to it!
    AC_CHECK_PROG(DLVPATH, $DLV, $DLV, notfound, [/])
fi

if test "$DLVPATH" = notfound; then
  AC_MSG_WARN([dlv not found. Download it at http://www.dlvsystem.com/])
else
  extsolver_found=true
  AC_DEFINE([HAVE_DLV], [1], [Defined if we found dlv.])
  AC_DEFINE_UNQUOTED(DLVPATH,"$DLVPATH",[Path of DLV executable])
fi


#
# the user didn't supply a path for dlv-lib
#
if test "$DLVLIB" = ""; then
    # we assume we don't have LIBDLV
    foo=$foo;
else
  AC_DEFINE([HAVE_LIBDLV], [1], [Defined if we found libdlv.])
  EXTSOLVER_LIBS="${EXTSOLVER_LIBS} -l${DLVLIB} -ldl -lpthread"
  extsolver_found=true
fi
# TODO and check if it exists
dnl AC_CHECK_LIB($DLVLIB, [create_program_handler], [
dnl   AC_DEFINE([HAVE_LIBDLV], [1], [Defined if we found libdlv.])
dnl   LIBS="-l${DLVLIB} $LIBS"
dnl   ], [], [-ldl -lpthread])


#
# the user didn't supply a path for dlvdb
#
if test "$DLVDB" = ""; then
    # we assume "dlvdb"
    DLVDB=dlvdb
    # and check if it exists
    AC_CHECK_PROG(DLVDBPATH, $DLVDB, $DLVDB, notfound)
else
    # the user supplied a 'DLVDB=...'
    # check if it exists (with search path=/, since the user supplied
    # an entire path!) and set DLVPATH to it!
    AC_CHECK_PROG(DLVDBPATH, $DLVDB, $DLVDB, notfound, [/])
fi

if test "$DLVDBPATH" = notfound; then
    AC_MSG_WARN([Disabled support for dlvdb. Download it at http://www.mat.unical.it/terracina/dlvdb/])
else
    # put the dlvdb path into config.h
    AC_DEFINE_UNQUOTED(DLVDBPATH,"$DLVDBPATH",[Path of DLVDB executable])
    AC_DEFINE([HAVE_DLVDB], [1], [Defined if we found dlvdb.])
  extsolver_found=true
fi

#
# libclingo
# (try to use if specified, user has to take care that it can be found by setting LDFLAGS, CPPFLAGS)
#
AC_ARG_WITH([libclingo],[AS_HELP_STRING([--with-libclingo],[use clingo as external solver])],
  [with_libclingo_support=true],
  [with_libclingo_support=false])
# conditions in makefiles
AM_CONDITIONAL([HAVE_LIBCLINGO],[test "x${with_libclingo_support}" = xtrue])
if test "x${with_libclingo_support}" = xtrue; then
	# #define in config.h <- config.h.in
	AC_DEFINE([HAVE_LIBCLINGO], [1], [Defined if we have --with-libclingo.])
  if test "x${GRINGO_TRUNK_DIR}" = "x"; then
    AC_MSG_ERROR([You have to specify GRINGO_TRUNK_DIR in the environment for --with-libclingo.])
  fi
	EXTSOLVER_LIBS="${EXTSOLVER_LIBS} -lappclingo -lclasp -lappgringo -lgringo -llua -lprogram_opts -lsqlite3"
	EXTSOLVER_LIBS="${EXTSOLVER_LIBS} ${BOOST_FILESYSTEM_LIBS} ${BOOST_SYSTEM_LIBS}"
	EXTSOLVER_LDFLAGS="${EXTSOLVER_LDFLAGS} -L${GRINGO_TRUNK_DIR}/build/release/lib/ ${BOOST_FILESYSTEM_LDFLAGS} ${BOOST_SYSTEM_LDFLAGS}"
  EXTSOLVER_CPPFLAGS="${EXTSOLVER_CPPFLAGS} -I${GRINGO_TRUNK_DIR}/libprogram_opts/ -I${GRINGO_TRUNK_DIR}/libgringo/ -I${GRINGO_TRUNK_DIR}/libclasp/ -I${GRINGO_TRUNK_DIR}/app/"
  extsolver_found=true
fi
# TODO libclingo search for lib, test lib, set lib variables from these checks
# (at the moment we rely on the user to correctly give GRINGO_TRUNK_DIR)

if test "x${extsolver_found}" = xfalse; then
  AC_MSG_ERROR([No aspsolver backend found. Please make sure at least one of dlv/dlvdb/libdlv/libclingo is available.])
fi

AC_SUBST(EXTSOLVER_CPPFLAGS)
AC_SUBST(EXTSOLVER_LDFLAGS)
AC_SUBST(EXTSOLVER_LIBS)

CPPFLAGS="$CPPFLAGS -DUSER_PLUGIN_DIR='\"$userplugindir\"'"

# debug
AC_ARG_ENABLE(debug,
              [  --enable-debug          switch on debug and benchmarking routines (timers, ...)],
              [AC_DEFINE(DLVHEX_BENCHMARKING, [], [Turns on benchmarking routines for profiling])
               debug_support=true],
              [debug_support=false]
              )

#AM_CONDITIONAL([DLVHEX_DEBUG], [test x$debug_support = xtrue])

# for debug, we need the boost_date_time library
if test "$debug_support" = "true"; then
   BOOST_DATE_TIME
fi


#
# check for libcurl
#
LIBCURL_CHECK_CONFIG([], [], [], [AC_MSG_ERROR([could not find CURL library. Download it at http://curl.haxx.se/.])])


#
# check for bmagic
#
AC_ARG_WITH(bmagic,
            [  --with-bmagic=DIR       Prefix of bitmagic library (DIR=local forces local bmagic)]
)	    

BM_CPPFLAGS=""
BM_VERSION=""

if test x$with_bmagic != xlocal; then

   TMP_CPPFLAGS=$CPPFLAGS
   CPPFLAGS="$CPPFLAGS -I$with_bmagic"
   AC_LANG_PUSH([C++])
   AC_CHECK_HEADER([bm/bm.h], [have_bm=true], [have_bm=false])
   # todo: do some sanity compilations with this bmagic
   AC_LANG_POP([C++])
   CPPFLAGS=$TMP_CPPFLAGS

   if test x$have_bm = xfalse; then
      AC_MSG_WARN([bmagic not found. Using local bmagic.])
   else
      BM_CPPFLAGS="-I$with_bmagic"
      have_bm=true
   fi

fi

if test x$have_bm != xtrue; then
   # force local bmagic
   BM_CPPFLAGS="-I\${top_srcdir}/bm3.7.0/"
   BM_VERSION=3.7.0
fi

AC_SUBST(BM_CPPFLAGS)



#
# doxygen stuff
#
# these are the defaults, can be overridden by --enable-doxygen-...
DX_HTML_FEATURE([ON])
DX_CHM_FEATURE([OFF])
DX_CHI_FEATURE([OFF])
DX_MAN_FEATURE([OFF])
DX_RTF_FEATURE([OFF])
DX_XML_FEATURE([OFF])
DX_PDF_FEATURE([OFF])
DX_PS_FEATURE([OFF])
DX_INIT_DOXYGEN([dlvhex], [doxygen.cfg], [doc])


# output autogenerated files
AC_CONFIG_FILES([
           Makefile 
           dlvhex.pc
           examples/Makefile
           include/Makefile
           include/common.h
           include/dlvhex/Makefile
           include/testsuite/Makefile
           include/testsuite/dlvhex/Makefile
           src/Makefile
           src/dlvhex/Makefile
           testsuite/Makefile
           testsuite/benchgen/Makefile
           testsuite/olddlvhex_perfplugins/Makefile
])


AC_OUTPUT

dnl output configuration
cat <<EOF
 
$PACKAGE_TARNAME $PACKAGE_VERSION configuration:

 - Compiler settings
 CC: $CC
 CXX: $CXX
 CFLAGS: $CFLAGS
 CPPFLAGS: $CPPFLAGS
 CXXFLAGS: $CXXFLAGS
 LDFLAGS: $LDFLAGS
 
 - Path settings
 prefix: $prefix
 exec_prefix: $exec_prefix
 
 bindir: $bindir
 libdir: $libdir
 pkglibdir: $libdir/$PACKAGE_TARNAME
 datadir: $datadir

 userplugindir: $userplugindir
 sysplugindir: $sysplugindir

 - Using the following binaries:
 DLV: $DLVPATH
 DLVDB: $DLVDBPATH
 doxygen: $DX_DOXYGEN

 - Using the following libraries:
 Bitmagic: $BM_VERSION $BM_CPPFLAGS
 Boost: $boost_major_version $BOOST_CPPFLAGS
 Curl: $libcurl_cv_lib_curl_version $LIBCURL_CPPFLAGS
 Cppunit: $have_cppunit
 
 - Options:
 Debug: $debug_support

EOF
