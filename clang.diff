Index: src/dlvhex/BoostComponentFinder.cpp
===================================================================
--- src/dlvhex/BoostComponentFinder.cpp	(revision 2253)
+++ src/dlvhex/BoostComponentFinder.cpp	(working copy)
@@ -258,7 +258,9 @@
 	    //
 	    // create a label table for the graphviz output
 	    //
-	    std::string nms[3 * nodes.size()];
+      const int nnames = 3*nodes.size();
+      std::vector<std::string> nms(nnames);
+      const char* nmsc[nnames];
 
 	    std::ostringstream oss;
 	    RawPrintVisitor rpv(oss);
@@ -274,12 +276,13 @@
 		boost::algorithm::replace_all(at, "\"", "\\\"");
 
 		nms[y] = at;
+    nmsc[y] = nms[y].c_str();
 	      }
 
 	    std::ofstream out;
 			
 	    out.open(Globals::Instance()->lpfilename.c_str());
-	    write_graphviz(out, G, make_label_writer(nms));
+	    write_graphviz(out, G, make_label_writer(nmsc));
 	    out.close();
 	    
 	    Globals::Instance()->getVerboseStream() << "Graph written to "
Index: src/dlvhex/ProcessBuf.cpp
===================================================================
--- src/dlvhex/ProcessBuf.cpp	(revision 2253)
+++ src/dlvhex/ProcessBuf.cpp	(working copy)
@@ -111,7 +111,21 @@
 }
 
 
+/* without this we get
+/bin/sh ../../libtool --tag=CXX   --mode=link clang++  -W -Wall -g -O2 -export-dynamic -L/home/staff/ps/lib/ -L/home/staff/ps/lib/gtk-2.0/2.10.0/immodules -o dlvhex dlvhex.o RuleMLOutputBuilder.o ../../libltdl/libltdlc.la -ldl  -lcurl libdlvhexbase.la libaspsolver.la -ldl
+libtool: link: clang++ -W -Wall -g -O2 -o .libs/dlvhex dlvhex.o RuleMLOutputBuilder.o -Wl,--export-dynamic  /home/staff/ps/Documents/dlvhex/dlvhex/trunk/build_clang/libltdl/./.libs/dlopen.a -L/home/staff/ps/lib/ -L/home/staff/ps/lib/gtk-2.0/2.10.0/immodules ../../libltdl/.libs/libltdlc.a -lcurl ./.libs/libdlvhexbase.so ./.libs/libaspsolver.so /home/staff/ps//lib/libstdc++.so -lm -ldl -Wl,-rpath -Wl,/home/staff/ps//lib
+./.libs/libaspsolver.so: undefined reference to `std::vector<std::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::allocator<std::basic_string<char, std::char_traits<char>, std::allocator<char> > > >::size() const'
+collect2: ld returned 1 exit status
+clang: error: linker (via gcc) command failed with exit code 1 (use -v to see invocation)
+ */
 
+namespace{
+  const std::vector<std::string> foo;
+  int bar() {
+    return foo.size();
+  }
+}
+
 pid_t
 ProcessBuf::open(const std::vector<std::string>& av)
 {
Index: src/dlvhex/DLVProcess.cpp
===================================================================
--- src/dlvhex/DLVProcess.cpp	(revision 2253)
+++ src/dlvhex/DLVProcess.cpp	(working copy)
@@ -40,8 +40,9 @@
 #include "dlvhex/globals.h"
 
 #include <iostream>
-#include <boost/iostreams/tee.hpp>
-#include <boost/iostreams/filtering_stream.hpp>
+#include <cassert>
+//#include <boost/iostreams/tee.hpp>
+//#include <boost/iostreams/filtering_stream.hpp>
 
 
 DLVHEX_NAMESPACE_BEGIN
@@ -96,6 +97,7 @@
 {
   if (ipipe == 0 && opipe == 0)
     {
+      #if 0
       // first, setup the iostreams
       if (Globals::Instance()->doVerbose(Globals::GRAPH_PROCESSOR))
 	{
@@ -110,8 +112,9 @@
 	}
       else
 	{
+          #endif
 	  opipe = new std::iostream(&proc);
-	}
+	//}
       
       ipipe = new std::iostream(&proc);
       
Index: configure.ac
===================================================================
--- configure.ac	(revision 2253)
+++ configure.ac	(working copy)
@@ -163,7 +163,7 @@
 BOOST_SMART_PTR
 BOOST_STRING_ALGO
 BOOST_TOKENIZER
-BOOST_IOSTREAMS
+#BOOST_IOSTREAMS
 #BOOST_GRAPH #right now, we don't care about the libboost-graph shared library
 BOOST_FIND_HEADER([boost/ptr_container/indirect_fun.hpp])
 BOOST_FIND_HEADER([boost/graph/adjacency_list.hpp])
