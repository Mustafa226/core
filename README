-*- outline -*-


* You want to use just the binary
Read the following subsections and then jump directly to "Running dlvhex" below.

** DLV
dlvhex uses the answer-set solver DLV, which can be downloaded from
http://www.dlvsystem.com
Put the downloaded binary in your path so that it is executable on your system
(don't forget to "chmod +x" it!).  dlvhex is looking for "dlv", so you might
want to rename the downloaded binary or softlink to it.

** dlvhex
Download dlvhex and put it in your $PATH. It should work right away, but
probably you also want to add some plugins. You can put them into a folder
.dlvhex/plugins/ in your home directory, where dlvhex will find them. Or you use
the dlvhex switch --plugindir=... to specify an additional location to search
for plugin libraries. Oh - of course you need dlv also - see below in the
dependency section.


* You want to build and install from the sources
In this case, you probably need to install additional packages.

** Dependencies

*** boost
Boost is a collection of portable C++ source libraries, which are intended to
be widely useful, and usable across a broad spectrum of applications. You will
need a version equal or higher than 1.33.1. See http://www.boost.org/
Follow the instructions of the INSTALL file found in the distributions tarball.
Popular Linux and Unix distributions such as Fedora, Debian, and NetBSD include
pre-built Boost packages. E.g., in Debian (and Ubuntu), do

 $ apt-get install libboost-dev libboost-graph-dev


*** cppunit (optional)
CppUnit is used for the unit-testing of dlvhex, but not necessary for building
the application. See http://cppunit.sourceforge.net/
Follow the instructions of the INSTALL file found in the distributions tarball.
dlvhex has been tested with cppunit 1.10.2. Like boost, cppunit packages are
provided by the major Linux distributions. E.g., in Debian do
apt-get install cppunit

** Configuration
Run "configure" to create the necessary Makefiles. As usual, use the --prefix
switch to specify a custom installation location. dlvhex uses pkgconfig to
share build-related configuration with plugins. So if you also intend to
compile plugins and use a custom prefix for dlvhex, make sure to adjust the
PKG_CONFIG_PATH envvar appropriately, otherwise the configuration of the
plugins will not work. E.g., if your prefix is $HOME/localinstall/, then
PKG_CONFIG_PATH needs to be set to $HOME/localinstall/lib/pkgconfig.  If you
installed boost in a non-standard folder, use CPPFLAGS=-I/path/to/includes to
specify the location of the header files (you can also try to use the
"--with-boost" switch for configure, see "configure --help").
If configure complains, then something vital for building dlvhex is missing in
your system. If you get complaints about missing boost-headers, make sure that
you have the necesary parts of boost installed and that their version is
sufficiently recent (see above).

** Documentation
Run "make doxygen-run" to create the docs (a subdirectory "documentation" will
be created). By default, only the html-docs will be built. To enable other
formats, you have to specify the according configure-switch, e.g.,
"--enable-doxygen-ps".

** Testing
Run "make check" to build and execute the cppunit-based regression
testsuite.

** Installation
Run "make install" to install the binary dlvhex and its header files, which are
needed for developing plugins.

* Running dlvhex

Using dlvhex is very similar to working with the answer-set solver dlv. "dlvhex
--help" displays a short help with available command-line parameters. For an
introduction how to write hex-programs, see
http://http://www.kr.tuwien.ac.at/research/dlvhex/

