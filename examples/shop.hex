#namespace("shop", "http://www.kr.tuwien.ac.at/staff/roman/shop#")

vendor("shop:s1").
vendor("shop:s5").
vendor("shop:s9").
needed("shop:cpu").
needed("shop:harddisk").
needed("shop:case").
inputurl("http://www.kr.tuwien.ac.at/staff/roman/swlp/examples/shop.owl").

% for the case, we already have a contract with a specific vendor
contract("shop:s9","shop:case").

% choosing rules:
% avoid vendors that don't give a rebate
% rebate corresponds to 'Discount'
% consider vendors that sell things we need and that are not avoided

avoid(X) :- not rebate(X), vendor(X).
rebate(X) :- &dlC[Url,a,b,c,d,"Discount"](X), vendor(X), inputurl(Url).
c(supplier, X, Y) :- buy_cand(X, Y).
c(supplier, X, Y) :- contract(X, Y).

buy_cand(X,Y) :- vendor(X), not avoid(X), &dlR[Url,ee,f,g,h,"provides"](X,Y), needed(Y), not e(Y), inputurl(Url).

% additional exclusion rules:
% buy each part only from one vendor, and
% don't search for parts we already have a contract for

e(Y) :- buy_cand(X,Y), buy_cand(Z,Y), X != Z, vendor(Z), needed(Y), vendor(X).
e(Y) :- contract(Z,Y), vendor(Z), needed(Y).

% summarize result

supplied(X,Y) :- &dlR[Url,a,b,c,d,"supplier"](X,Y), needed(Y), vendor(X), inputurl(Url).

